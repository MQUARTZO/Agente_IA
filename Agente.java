import java.util.*; // Importa todas as classes do pacote java.util, como List e ArrayList

// Classe que representa o agente inteligente no ambiente
public class Agente {
    private Posicao posicaoAtual; // Posi√ß√£o atual do agente no ambiente
    private Ambiente ambiente; // Refer√™ncia ao ambiente onde o agente est√°
    private List<Posicao> caminhoPlanejado; // Lista de posi√ß√µes que formam o caminho planejado at√© o tesouro
    private int tics; // Contador de movimentos realizados pelo agente
    private boolean vivo; // Indica se o agente ainda est√° vivo

    // Construtor do agente, inicializa as vari√°veis
    public Agente(Ambiente ambiente) {
        this.ambiente = ambiente; // Define o ambiente do agente
        this.posicaoAtual = new Posicao(0, 0); // Define a posi√ß√£o inicial no canto inferior esquerdo
        this.caminhoPlanejado = new ArrayList<>(); // Inicializa a lista do caminho planejado
        this.vivo = true; // O agente come√ßa vivo
        this.tics = 0; // Inicializa o contador de movimentos
    }

    // M√©todo para iniciar a busca pelo caminho at√© o tesouro
    public void iniciarBusca() {
        System.out.println("üß† Buscando o melhor caminho...");
        planejarCaminho(); // Chama o m√©todo que planeja o caminho
    }

    // M√©todo privado que planeja o caminho usando o algoritmo A*
    private void planejarCaminho() {
        BuscaAEstrela busca = new BuscaAEstrela(ambiente); // Cria uma inst√¢ncia do algoritmo de busca A*
        caminhoPlanejado = busca.buscar(posicaoAtual, ambiente.getPosicaoTesouro()); // Busca o caminho at√© o tesouro

        // Se n√£o encontrou caminho ou o caminho est√° vazio, informa que n√£o √© poss√≠vel chegar ao tesouro
        if (caminhoPlanejado == null || caminhoPlanejado.isEmpty()) {
            System.out.println("‚ùå Nenhum caminho poss√≠vel at√© o tesouro.");
        } else {
            // Caso contr√°rio, informa quantos passos o caminho possui
            System.out.println("üìç Caminho planejado com " + caminhoPlanejado.size() + " passos.\n");
        }
    }

    // Executa o pr√≥ximo movimento do agente no caminho planejado
    public void executarProximoMovimento() {
        // Se o agente est√° morto, n√£o h√° caminho ou o caminho acabou, n√£o faz nada
        if (!vivo || caminhoPlanejado == null || caminhoPlanejado.isEmpty()) return;

        Posicao proxima = caminhoPlanejado.remove(0); // Remove e obt√©m a pr√≥xima posi√ß√£o do caminho
        Celula destino = ambiente.getCelula(proxima); // Obt√©m a c√©lula do ambiente correspondente √† pr√≥xima posi√ß√£o

        // Se a c√©lula de destino √© um po√ßo, o agente morre
        if (destino.getTipo() == TipoCelula.POCOS) {
            posicaoAtual = proxima; // Atualiza a posi√ß√£o do agente
            vivo = false; // Marca o agente como morto
            tics++; // Incrementa o contador de movimentos
            System.out.println("[Tic " + tics + "] ‚ò†Ô∏è O agente caiu em um po√ßo em " + posicaoAtual + " e morreu!");
            ambiente.imprimirAmbiente(posicaoAtual); // Imprime o ambiente com a posi√ß√£o atual
            return; // Encerra o m√©todo
        }

        // Se a c√©lula de destino √© um obst√°culo, recalcula o caminho
        if (destino.getTipo() == TipoCelula.OBSTACULO) {
            System.out.println("[Tic " + tics + "] ‚ö†Ô∏è Obst√°culo detectado em " + proxima + ", recalculando rota.");
            planejarCaminho(); // Recalcula o caminho
            return; // Encerra o m√©todo
        }

        // Caso contr√°rio, move o agente para a pr√≥xima posi√ß√£o
        posicaoAtual = proxima; // Atualiza a posi√ß√£o do agente
        tics++; // Incrementa o contador de movimentos
        System.out.println("[Tic " + tics + "] ‚úÖ Moveu-se para " + posicaoAtual);
        ambiente.imprimirAmbiente(posicaoAtual); // Imprime o ambiente com a nova posi√ß√£o
        System.out.println(); // Linha em branco para separar as sa√≠das
    }

    // Verifica se o agente encontrou o tesouro
    public boolean encontrouTesouro() {
        return ambiente.getCelula(posicaoAtual).getTipo() == TipoCelula.TESOURO;
    }

    // Verifica se ainda h√° movimentos poss√≠veis e se o agente est√° vivo
    public boolean aindaTemMovimentos() {
        return caminhoPlanejado != null && !caminhoPlanejado.isEmpty() && vivo;
    }

    // Retorna se o agente est√° vivo
    public boolean estaVivo() {
        return vivo;
    }

    // Retorna a posi√ß√£o atual do agente
    public Posicao getPosicaoAtual() {
        return posicaoAtual;
    }

}
